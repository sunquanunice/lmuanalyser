a=   {blabla  }

section simulation

    #Simulation is deterministic. Allows to make each simulation
    #with same parameters different.
    section prng
        seed=0.6
    end of section

    #Tell for which version of Mascsim this config file can be used
    required-version={2010.08.02.22.46.39}

    # Wether the simulation engine should use multi-threading, hence
    # benefiting from multi-core architectures
    #parallel-processing={yes}


    section logging
    #Display debug events
        print-events={true}

    #Save events to the file provided in argument
        log-file={}
    end of section

    # Slowdown the simulation. Increase the time before each event processing
    slowdown={0}

    section experimentation
        # the parameter that will be varied
        varying-parameters={number_of_nodes}

        # the number of runs needed for statistical confidence
        number-of-runs={1}

    #Class used to compute and write results
        result-processor={org.mascsim.result.MascsimResultProcessor}

    #Class used to organized and plot results

result-plotter-processor={org.drmsim.result.DrmsimResultPlotterProcessor}

       #Class used by the result-plotter-processor to plot results - By default Gnuplot
           #result-processor={}



    #Scenario to use. It is the simulation model.

    #Routing from one node to an other one randomly selected
        simulation-class={org.drmsim.scenario.OneToOne}
    #Test scenario. Nothing done.
        #simulation-class={org.drmsim.scenario.DoNothing}

    #Stop when all nodes routing table contains the same
    # number of entries than number of nodes.
        #simulation-class={org.drmsim.scenario.RunsUntilTablesAreFull}
    
    #All nodes route to all other nodes
        #simulation-class={org.drmsim.scenario.AllToAll}

    #All nodes route to all one same node
        #simulation-class={org.drmsim.scenario.AllToOne}

    #Scpecific parameter. Number of routing performed from one2one
    #node to an other one
        section one2one
            number-of-routings={1}
        end of section


        # Defines the set of views that will apply to the system
        # listeners={org.drmsim.routing.bgp.views.BGPViewManager}
        # listeners={org.drmsim.listeners.StretchCalculator}
        listeners={org.drmsim.view.BasicRoutingView}

    end of section

    section metrics
    
    #Measures taken all along the simualtion
    metrics-class={org.drmsim.metric.NumberOfDeliveries,org.drmsim.metric.ClusteringCoefficient,org.drmsim.metric.Density,org.drmsim.metric.Diameter,org.drmsim.metric.NumberOfLinkFailures,org.drmsim.metric.NumberOfLinks,org.drmsim.metric.NumberOfRouters,org.drmsim.metric.NumberOfRoutingFailures,org.drmsim.metric.Radius,org.drmsim.metric.Stretch,org.drmsim.metric.SizeInBitsOfRoutingTables,org.drmsim.metric.NumberOfEntriesOfRoutingTables,org.drmsim.routing.bgp.metric.BGPUpdate}
    valid-values-minimum-number={1}
    #measure interval to avoid to take to much measures
    general-measure-interval={1}
    
        section SizeInBitsOfRoutingTables
            measure-interval={5000}
        end of section
    
        section NumberOfEntriesOfRoutingTables
            measure-interval={5000}
        end of section
    
    end of section
end of section

section model
    #event interval delay, by default interval 100000 to 1000000 is used.
    messageEmissionDelay={[100000 1000000]}

    #Topology paramteters
    section graph

    #Number of nodes of the topology
        number_of_nodes={5}

    #Topology generators used and its caracteristics
        section topology


generator={org.dipergrafs.topology.GLPTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

         #Inet topology generator needs at least 3037 nodes. Refer to inet doc for more explanation.

#topology_generator={org.dipergrafs.topology.InetTopologyGenerator}

#topology_generator={org.dipergrafs.topology.BriteTopologyGenerator}

#topology_generator={org.dipergrafs.topology.MraiTestTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.GridTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.ChordalTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.ChainTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.CliqueTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.RandomTreeTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.StarTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.T1T2T3TopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

#topology_generator={org.dipergrafs.topology.RandomTopologyGenerator,org.dipergrafs.topology.SymmetricTopologyGenerator}

        #Used with org.dipergrafs.topology.RandomTreeTopologyGenerator
            section random
                # probability to to connect two vertices at each iteration
                probability={0.75}
            end of section

        #Used with org.dipergrafs.topology.GLPTopologyGenerator
            section glp
                numberOfInitialNodes={6}
                numberOfEdgesPerStep={1.15}
                beta={0.6753}
                stepProbability={0.4669}
            end of section
        end of section

      #Use value "save" or "load" to respectively save or load a graph from/to a file.
      #Second value is the file format. "dot" for graphviz file, "dhdl" for drmsim
      #text file and "binary" for drmsim binary file.
      #Provide the file where to save/load the graph. Set the last value to true
      #to compute the graph properties. They will be saved into the same graph file
      #name provided but with .properties as extension.
      graphFile={save, dhdl, graph1000.drmsim, false}

    end of section




    section routing
    #Defines the routing protocol that will be executed accross the system

routing_protocol={org.drmsim.routing.abraham2.AbrahamRoutingAlgorithm}
        #routing_protocol={org.drmsim.routing.nsr.NSRRoutingAlgorithm}
        #routing_protocol={org.drmsim.routing.rip.RIPRoutingAlgorithm}
        #routing_protocol={org.drmsim.routing.bgp.BGPRoutingAlgorithm}

#routing_protocol={org.drmsim.routing.source.CentralizedSourceRouting}
        #routing_protocol={org.drmsim.routing.RandomRouting}
        #routing_protocol={org.drmsim.routing.BlindBroadcastingRouting}
        #routing_protocol={org.drmsim.routing.BackToPreviousHopRouting}
        #routing_protocol={org.drmsim.routing.BackToSourceRouting}
        #routing_protocol={org.drmsim.routing.ClosestAddressRouting}
        #routing_protocol={org.drmsim.routing.NoRouting}
        #routing_protocol={org.drmsim.routing.PolymorphRouting}
        #routing_protocol={org.drmsim.routing.RoundRobinLinkRouting}

    
        section NSR
        # allow to select the root router. By default it is router 0
        root-of-tree={0}
        end of section

    #First argument is the class to use to save/load routing table(s) depending
    #of the routing protocol. Second argument is the file name to use.
        #loadRoutingTables={org.drmsim.routing.bgp.BGPRoutingIO, routingTables.drmsim}
        #saveRoutingTables={org.drmsim.routing.bgp.BGPRoutingIO, routingTables.drmsim}

        #loadRoutingTables={org.drmsim.routing.nsr.NSRRoutingIO, routingTables.drmsim}
        #saveRoutingTables={org.drmsim.routing.nsr.NSRRoutingIO, routingTables.drmsim}

    end of section
end of section

